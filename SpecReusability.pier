!! Reuse with ''Spec''
@sec_reuse_spec

The section introduces an exemple of how to define and reuse ''Spec'' models.

The example is structured in four parts.
First a list dedicated to render the subclasses of ==AbstractWidgetModel== is created under the name ""ModelList"".
Second a UI composed of a list and a label is defined and named ""ProtocolList"".
Third a protocol viewer is defined by combining a ""ModelList"" with two ""ProtocolList"" to browse the ''protocol'' and ''protocol-events'' methods.
Finally a protocol browser is made by reusing a protocol viewer with a text zone in addition.

!!! The MethodList

Defining a dedicated list is quite simple since ""ListModel"" provides default values for all the states.
Creating a specific widget always starts with the subclassing of ""ComposableModel"".
Each sub widget is stored into an instance variable.
The snippet *ex_model_list* shows the definition of ModelList.

[[[label=ex_model_list|caption=ModelList definition|language=Smalltalk 
ComposableModel subclass: #ModelList
	instanceVariableNames: 'list'
	classVariableNames: ''
	category: 'Spec-Examples'
]]]

The first required step then is to instantiate and define the sub widget.
This step is done in the method ""MethodList"" as shown is the code *ex_modelList_initializeWidgets*.

[[[label=ex_modelList_initializeWidgets|caption=Implementation of ModelList>>#initializeWidgets|language=Smalltalk 
initializeWidgets

	list := self newList.
	
	list items: (AbstractWidgetModel allSubclasses 
		sorted: [:a :b | a name < b name ]).
		
	self focusOrder add: list
]]]

The second required step is to define a layout on class side.
Since there is here only one sub widget, the layout is quite simple as shown in code *ex_modelList_layout*.

[[[label=ex_modelList_layout|caption=ModelList layout|language=Smalltalk 
ModelList class>>#defaultSpec
	<spec: #default>
	
	^ SpecLayout composed
		add: #list;
		yourself
]]]

The three last methods defined on MethodList are a getter, and method to display the UI title and a method to register to list selection changes.
The code *ex_modelList_others* shows the implementation of these three methods and their protocol.

[[[label=ex_modelList_others|caption=ModelList other methods|language=Smalltalk 
"accessing"
list
	^ list
	
"protocol"
title

	^ 'Widgets'
	
"protocol-events"
whenSelectedItemChanged: aBlock

	list whenSelectedItemChanged: aBlock
]]]


The first UI is now done.
The result can be seen by performing the following snippet: ==ModelList new openWithSpec==.

!!! The ProtocolList

The next user interface is the protocol list.
This UI combines two sub widgets: a list and a label.
The class definition is then similar to the code *ex_protocolList_definition*.

[[[label=ex_protocolList_definition|caption=ProtocolList definition|language=Smalltalk 
ComposableModel subclass: #ProtocolList
	instanceVariableNames: 'label protocols'
	classVariableNames: ''
	category: 'Spec-Examples'
]]]

The ==initializeWidgets== method for this UI is quite similar of the ModelList method as the code *ex_protocolList_init* shows.

[[[label=ex_protocolList_init|caption=ProtocolList implementation of initializeWidgets|language=Smalltalk 
initializeWidgets

	protocols := self newList.
	label := self newLabel.
	
	label text: 'Protocol'.
	
	self focusOrder add: protocols
]]]

The layout method is quite different though.
Indeed the sub widgets need to be placed more specifically than previously.
The code *ex_protocolList_layout* shows how to build a column with the label on top and the list taking all the space left.

[[[label=ex_protocolList_layout|caption=ProtocolList layout|language=Smalltalk 
defaultSpec
	<spec: #default>

	^ SpecLayout composed
		newColumn: [ :column |
			column
				add: #label
				height: self toolbarHeight;
				add: #protocols ];
		yourself
]]]

The remaining methods are getters, sub widget delegation methods, a method to disply the title, and a method to register to list selection changes.
The code *ex_protocolList_others* shows the implementations of these methods as well as their protocol.

[[[label=ex_protocolList_others|caption=ProtocolList other methods|language=Smalltalk 
"accessing"
label
	^ label
	
"accessing"
protocols
	^ protocols
	
"protocol"
displayBlock: aBlock

	protocols displayBlock: aBlock

"protocol"
items: aCollection

	protocols items: aCollection
	
"protocol"
label: aText

	label text: aText
	
"protocol"
resetSelection

	protocols resetSelection
	
"protocol"
title

	^ 'Protocol widget'
	
"protocol-events"
whenSelectedItemChanged: aBlock

	protocols whenSelectedItemChanged: aBlock
]]]

The ""ProtocolList"" UI can be seen by evaluating the snippet ==ProtocolList new openWithSpec==.

!!! The ProtocolViewer

The third user interface is a composition of the two previous user interfaces.
It is composed of a ""ModelList"" and two ""ProtocolList"".
When a model class is selected, the methods in the protocol ''protocol'' and in the protocol ''protocol-events'' are listed.

The class has now three instance variables: ==models== to store the ""ModelList"", ==protocols== to store the ""ProtocolList"" for the protocol ''protocol'', and ==events== to store the ""ProtocolList"" for protocol ''protocol-events''.
The code *ex_viewer_definition* shows the definition of the class ""ProtocolViewer"".

[[[label=ex_viewer_definition|caption=ProtocolViewer definition|language=Smalltalk 
ComposableModel subclass: #ProtocolViewer
	instanceVariableNames: 'models protocols events'
	classVariableNames: ''
	category: 'Spec-Examples'
]]]

The ==initializeWidgets== method remains quite similar to the previous implementation as shown in the code *ex_viewer_initializeWidgets*.

[[[label=ex_viewer_initializeWidgets|caption=Implementation of ProtocolViewer>>#initializeWidgets|language=Smalltalk 
initializeWidgets

	models := self instantiate: ModelList.
	protocols := self instantiate: ProtocolList.
	events := self instantiate: ProtocolList.
	
	protocols
		label: 'protocol';
		displayBlock: [ :m | m selector ].
	events
		label: 'protocol-events';
		displayBlock: [ :m | m selector ].
		
	self focusOrder 
		add: models;
		add: protocols;
		add: events
]]]

The layout put the sub widget in one column, with all sub widget taking the same amount of space.
The code *ex_viewer_layout* shows the implementation of this layout.

[[[label=ex_viewer_layout|caption=ProtocolViewer column layout|language=Smalltalk 
defaultSpec
	<spec: #default>
	
	^ SpecLayout composed
		newColumn: [ :column |
			column 
				add: #models; 
				add: #protocols; 
				add: #events ];
		yourself
]]]

The method ==initializePresenter== describe the interactions between the sub widgets.
Here it specifies that when a class is selected, the two protocol lists are populated.
The protocol list selections are also resetted when a new class is selected.
The implementation of this method is exposed in code *ex_viewer_presenter*.

[[[label=ex_viewer_presenter|caption=ProtocolViewer interactions|language=Smalltalk
initializePresenter

	models whenSelectedItemChanged: [ :class |
		protocols resetSelection.
		events resetSelection.
		class
			ifNil: [ 
				protocols items: #().
				events items: #() ]
			ifNotNil: [ 
				protocols items: (self methodsIn: class for: 'protocol').
				events items: (self methodsIn: class for: 'protocol-events') ] ].
	
	protocols whenSelectedItemChanged: [ :method | method ifNotNil: [ self resetEventSelection ] ].
	events whenSelectedItemChanged: [ :method | method ifNotNil: [ self resetProtocolSelection ] ].
]]]

The remaining methods are getters, methods to delegate to sub widgets, one method to compute the methods in a specific class for a specific protocol, and methods to register to sub widgets events.
Those methods are summed up in the code *ex_viewer_others*.

[[[label=ex_viewer_others|caption=ProtocolViewer other methods|language=Smalltalk 
"accessing"
events
	^ events

"accessing"
models
	^ models

"accessing"
protocols
	^ protocols

"private"
methodsIn: class for: protocol

	^ (class methodsInProtocol: protocol)
		sorted: [ :a :b | a selector < b selector ]

"protocol"
resetEventSelection

	events resetSelection

"protocol"
resetProtocolSelection

	protocols resetSelection

"protocol"
title

	^ 'Protocol viewer'

"protocol-events"
whenClassChanged: aBlock

	models whenSelectedItemChanged: aBlock

"protocol-events"
whenEventChangedDo: aBlock

	events whenSelectedItemChanged: aBlock

"protocol-events"
whenProtocolChangedDo: aBlock

	protocols whenSelectedItemChanged: aBlock
]]]

As previously the result can be seen by executing the following snippet: ==ProtocolViewer new openWithSpec==.

!!! Protocol Editor

The last user interface reuses a ""ProtocolViewer"" with a different and a text zone to visualize the selected method sourceCode.
The class definition can be seen in code *ex_browser_definition*.

[[[label=ex_browser_definition|caption=ProtocolBrowser definition|language=Smalltalk 
ComposableModel subclass: #ProtocolEditor
	instanceVariableNames: 'viewer text'
	classVariableNames: ''
	category: 'Spec-Examples'
]]]

The ==initializeWidgets== implementation is exposed in code *ex_browser_initializeWidgets*.

[[[label=ex_browser_initializeWidgets|caption=ProtocolEditor>>#initializeWidgets|language=Smalltalk 
initializeWidgets

	text := self newText.
	viewer := self instantiate: ProtocolViewer.
	
	text aboutToStyle: true.

	self focusOrder 
		add: viewer;
		add: text
]]]

The layout is more complex than previous layouts.
Indeed, the user interface mainly layout sub widget sub widgets.
The layout is based on a column which first row is divided in columns.
The implementation of this method is shown in code *ex_browser_layout*.

[[[label=ex_browser_layout|caption=ProtocolBrowser layout|language=Smalltalk 
defaultSpec
	<spec: #default>
	
	^ SpecLayout composed
		newColumn: [ :col | 
			col 
				newRow: [ :r | 
					r 
						add: #(viewer models);
					 	newColumn: [ :c | 
							c 
								add: #(viewer protocols);
								add: #(viewer events) ] ];
				add: #text
		];
		yourself
]]]

The ==initalizePresenter== method is used to make the text zone reacts to lists selection.
When a method is seleted, the text zone update its contents to show the selected method source code.
The implementation of this method is detailled in code *ex_browser_presenter*.

[[[label=ex_browser_presenter|caption=ProtocolBrowser interactions|language=Smalltalk 
initializePresenter

	viewer whenClassChanged: [ :class | text behavior: class ].

	viewer whenProtocolChangedDo: [ :item | 
		item 
			ifNil: [ text text: '' ]
			ifNotNil: [ text text: item sourceCode ] ].
	viewer whenEventChangedDo: [ :item | 
		item 
			ifNil: [ text text: '' ]
			ifNotNil: [ text text: item sourceCode ] ]
]]]

The others methods are two getters, a method to set the default size, and a method to set the UI title.
Their implemenations are detailled in code *ex_browser_others*.

[[[label=ex_browser_others|caption=ProtocolBrowser remaining methods|language=Smalltalk
"accessing"
text
	^ text

"accessing"
viewer
	^ viewer

"protocol"
initialExtent

	^ 750@600

"protocol"
title

	^ 'Protocols browser'
]]]

The final user interface can be opened with the following snippet: ==ProtocolBrowser new openWithSpec==.
The result can be seen in figure *fig_protocol_browser*.

+Protocol Browser>file://figures/Protocol_Browser.png|width=50|label=fig_protocol_browser+