!! Where to find what I want
@sec_where_to_find_what_I_want

This section explains where to find a model API and how to decrypt the meta information attached to those API methods.

!!! Where is the API

Each model contains at least two protocols containin the public API methods.

The first protocol is named ""protocol"".
It gathers all the methods to set or get the current states of the model plus the behavioral methods acting directly to these states.

The second protocol is named ""protocol-events"".
It gathers all the methods used to register to a state change.

All this methods are commented to explain the purpose of them.

!!! Meta information

All the public methods have meta information attached documenting the usage of them.

Each type of methods has a different syntax, even though they are close.

For getters, the meta information is always ''<api: #inspect>''.
It points out this method is a getter.
The example *ex_api_getter* shows how ''action'' is implemented in ""ButtonModel"".

[[[label=ex_api_getter|caption=Implementation of ButtonModel>>#action|language=Smalltalk 
action
	<api: #inspect>
	"get the block performed when the button is clicked"

	^ actionHolder value
]]]

The setters meta information are a bit more complex.
Its form is ''<api: typeOfArgument getter: getterSelector registration: registrationMethodSelector>''.

The possible values of ''typeOfArguments'' are:

- block,
- boolean,
- color,
- image,
- integer,
- point,
- st : st is used to represent any other ''Smalltalk'' object,
- string.

''getterSelector'' is used to precise which getter method return the state set by this method.

''registrationMethodSelector'' precises which method to use to register to the corresponding state changes.

The example *ex_api_setter* shows how ''actions:'' is implemented in ""ButtonModel"".

[[[label=ex_api_setter|caption=Implementation of ButtonModel>>#action:|language=Smalltalk 
action: aBlock
	<api: #block getter: #getAction registration: #whenActionChangedDo:>
	"set the block performed when the button is clicked"

	actionHolder value: aBlock
]]]

The registration methods information always follow the pattern ''<api: #event>''.
The example *ex_api_registration* shows how the method ''whenActionChangedDo:'' is implemented on ""ButtonModel"".

[[[label=ex_api_registration|caption=Implementation of ButtonModel>>#whenActionChangedDo|language=Smalltalk 
whenActionChangedDo: aBlock 
	<api: #event>
	"Set the block performed when the action to perform is changed"

	actionHolder whenChangedDo: aBlock
]]]