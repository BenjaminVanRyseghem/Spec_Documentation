!!Parties, a dynamic example
In an address book we find addresses of both people and organizations. 
The generalization of both is called a party ('Analysis Patterns', Martin Fowler). 
In this example we'll make an address book where we can add both persons and companies.
They will have different attributes.
We show how to do add them with a dynamic user interface, and minimize duplication.

!!! The party model
Create the abstract superclass ==Party==
[[[
Object subclass: #DOParty
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'Domain-Parties'
]]

A party responds to the ==fullName== message. 

[[[
fullName
	^'Full name'
]]]

The subclasses are going to override this message.
Create a subclass for persons:

[[[
DOParty subclass: #DOPerson
	instanceVariableNames: 'firstName lastName'
	classVariableNames: ''
	category: 'Domain-Parties'
]]]

Create accessors for ==firstName== and ==lastName==. We don't want to need to handle ==nil==
as a special case, so return the empty string if the instVars are nil.

[[[
firstName
	^firstName ifNil: [ '' ]
	
firstName: aString
	firstName := aString

lastName
	^lastName ifNil: [ '' ]

lastName: aString
	lastName := aString
]]]

We can now override the ==fullName==.

[[[
fullName
	^self firstName, ' ', self lastName
]]]

Create a subclass for companies

[[[
DOParty subclass: #DOCompany
	instanceVariableNames: 'companyName'
	classVariableNames: ''
	category: 'Domain-Parties'
]]]

And its accessors and the overridden method

[[[
companyName
	^ companyName ifNil: ['']
	
companyName: anObject
	companyName := anObject
	
fullName
	^ self companyName 
]]]

In this example we will simply keep all parties in the image.
We create a class to hold parties

[[[
Object subclass: #DOPartiesModel
	instanceVariableNames: 'parties'
	classVariableNames: ''
	category: 'Domain-Parties'
]]]

And lazily initialize  with a collection

[[[
parties
	^parties ifNil: [ parties := OrderedCollection new ]
	
parties: aCollection
	parties := aCollection
]]]

On the class side we add an instanceVariable ==default== as the singleton
and two methods to access and reset it.

[[[
DOPartiesModel class
	instanceVariableNames: 'default'
	
default
	^default ifNil: [ default := self new ]
	
reset
	default := nil
]]]

